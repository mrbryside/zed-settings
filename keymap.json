// keymap.json, generated at Sat Mar 22 2025 17:00:58 GMT+0800 (Singapore Standard Time)
[
  {
    "context": "Editor && (vim_mode == normal || vim_mode == visual) && !VimWaiting && !menu",
    "bindings": {
      // put key-bindings here if you want them to work in normal & visual mode
      // Git
      "space g h d": "editor::ToggleSelectedDiffHunks",
      "space g s": "git_panel::ToggleFocus",

      // Toggle inlay hints
      "space t i": "editor::ToggleInlayHints",

      // Toggle soft wrap
      "space u w": "editor::ToggleSoftWrap",

      // NOTE: Toggle Zen mode, not fully working yet
      "space c z": "workspace::ToggleCenteredLayout",

      // Open markdown preview
      "space m p": "markdown::OpenPreview",
      "space m P": "markdown::OpenPreviewToTheSide",

      // Open recent project
      "space f p": "projects::OpenRecent",
      // Search word under cursor
      "space s w": "pane::DeploySearch",

      // // Chat with AI
      // "space a c": "assistant::ToggleFocus",
      //

      // toggle layzygit
      "space l": ["task::Spawn", { "task_name": "start lazygit" }],

      // Go to file with `gf`
      "g f": "editor::OpenExcerpts",

      // select next occurrence of current selection
      "ctrl-n": ["editor::SelectNext", { "replace_newest": false }], // editor.action.addSelectionToNextFindMatch / find_under_expand
      // unselect current
      "space n": ["editor::SelectNext", { "replace_newest": true }], // editor.action.moveSelectionToNextFindMatch / find_under_expand_skip
      "space b": ["editor::SelectPrevious", { "replace_newest": true }], // editor.action.moveSelectionToNextFindMatch / find_under_expand_skip

      // select all match
      "ctrl-m": "editor::SelectAllMatches", // Select all occurrences of current selection

      // vim indent
      "tab": "editor::Indent",
      "shift-tab": "editor::Outdent"
    }
  },
  {
    "context": "Editor && vim_mode == normal && !VimWaiting && !menu",
    "bindings": {
      // put key-bindings here if you want them to work only in normal mode
      // Window movement bindings
      // Ctrl jklk to move between panes
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown",

      // +LSP
      "space c a": "editor::ToggleCodeActions",
      "space .": "editor::ToggleCodeActions",
      "space c r": "editor::Rename",
      "g d": "editor::GoToDefinition",
      "g D": "editor::GoToDefinitionSplit",
      "g i": "editor::GoToImplementation",
      "g I": "editor::GoToImplementationSplit",
      "g t": "editor::GoToTypeDefinition",
      "g T": "editor::GoToTypeDefinitionSplit",
      "g r": "editor::FindAllReferences",
      "] d": "editor::GoToDiagnostic",
      "[ d": "editor::GoToPreviousDiagnostic",
      // TODO: Go to next/prev error
      "] e": "editor::GoToDiagnostic",
      "[ e": "editor::GoToPreviousDiagnostic",
      // Symbol search
      "s s": "outline::Toggle",
      "s S": "project_symbols::Toggle",
      // Diagnostic
      "space x x": "diagnostics::Deploy",

      // split pane
      "space v": "pane::SplitRight",

      // delete line
      "space d": "vim::VisualDeleteLine",
      // copy line
      "space f": "vim::YankLine",

      "shift-k": ["workspace::SendKeystrokes", "i enter escape"],

      // +Git
      // Git prev/next hunk
      "] h": "editor::GoToHunk",
      "[ h": "editor::GoToPreviousHunk",

      // TODO: git diff is not ready yet, refer https://github.com/zed-industries/zed/issues/8665#issuecomment-2194000497

      // + Buffers
      // Switch between buffers
      "shift-h": "pane::ActivatePreviousItem",
      "shift-l": "pane::ActivateNextItem",
      // Close active panel
      "shift-q": "pane::CloseActiveItem",
      "ctrl-q": "pane::CloseActiveItem",
      "space b d": "pane::CloseActiveItem",
      // Close other items
      "space b o": "pane::CloseInactiveItems",
      // Save file
      "ctrl-s": "workspace::Save",
      // File finder
      "space space": "file_finder::Toggle",
      // Project search
      "space /": "pane::DeploySearch",
      // TODO: Open other files
      // Show project panel with current file
      "space e": "pane::RevealInProjectPanel",

      // Fold - Unfold
      "space [": "editor::Fold",
      "space ]": "editor::UnfoldLines",

      // Show Hover
      "ctrl-i": "editor::Hover"
    }
  },
  {
    "context": "Editor && (vim_mode == normal || vim_mode == visual) && !VimWaiting && !menu",
    "bindings": {}
  },

  // Empty pane, set of keybindings that are available when there is no active editor
  {
    "context": "EmptyPane || SharedScreen",
    "bindings": {
      // Open file finder
      "space space": "file_finder::Toggle",
      // Open recent project
      "space f p": "projects::OpenRecent"
    }
  },
  // Comment code
  {
    "context": "Editor && vim_mode == visual && !VimWaiting && !menu",
    "bindings": {
      // visual, visual line & visual block modes
      "g c": "editor::ToggleComments",
      "space f": "vim::VisualYank",
      "cmd-c": "vim::VisualYank",

      // surround
      "space s": ["vim::PushAddSurrounds", {}]
    }
  },
  // Better escape
  {
    // "context": "Editor && vim_mode == insert && !menu",
    "context": "Editor && vim_mode == insert", // remove menu to make it work when autocomplete show
    "bindings": {
      "j k": "vim::NormalBefore" // remap jk in insert mode to escape
    }
  },
  // Rename
  {
    "context": "Editor && vim_operator == c",
    "bindings": {
      "c": "vim::CurrentLine",
      "r": "editor::Rename" // zed specific
    }
  },
  // Code Action
  {
    "context": "Editor && vim_operator == c",
    "bindings": {
      "c": "vim::CurrentLine",
      "a": "editor::ToggleCodeActions" // zed specific
    }
  },
  // Editor
  {
    "context": "Editor",
    "bindings": {
      "ctrl-e": "workspace::ToggleZoom",
      "cmd-e": "project_panel::ToggleFocus",
      "cmd-s": "workspace::ToggleLeftDock",
      "cmd-r": "workspace::ToggleRightDock",
      "cmd-u": "workspace::ToggleBottomDock"
    }
  },
  // close active item pane
  {
    "context": "Workspace",
    "bindings": {
      "cmd-s": "workspace::ToggleLeftDock",
      "cmd-e": "workspace::ActivatePaneLeft",
      "cmd-r": "workspace::ToggleRightDock",
      "cmd-u": "workspace::ToggleBottomDock"
    }
  },
  {
    "context": "Terminal",
    "bindings": {
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown",
      "ctrl-n": "workspace::NewTerminal",
      "ctrl-e": "workspace::ToggleZoom"
    }
  },
  // File panel (netrw)
  {
    "context": "ProjectPanel && not_editing",
    "bindings": {
      "a": "project_panel::NewFile",
      "A": "project_panel::NewDirectory",
      "r": "project_panel::Rename",
      "d": "project_panel::Delete",
      "x": "project_panel::Cut",
      "c": "project_panel::Copy",
      "p": "project_panel::Paste",
      "l": "project_panel::OpenPermanent",
      "L": "project_panel::Open",
      "ctrl-a": "project_panel::CollapseAllEntries",

      // Navigate between panel
      "ctrl-h": "workspace::ActivatePaneLeft",
      "ctrl-l": "workspace::ActivatePaneRight",
      "ctrl-k": "workspace::ActivatePaneUp",
      "ctrl-j": "workspace::ActivatePaneDown"
    }
  },
  // Panel nagivation
  {
    "context": "Dock",
    "bindings": {
      "ctrl-w h": "workspace::ActivatePaneLeft",
      "ctrl-w l": "workspace::ActivatePaneRight",
      "ctrl-w k": "workspace::ActivatePaneUp",
      "ctrl-w j": "workspace::ActivatePaneDown"
    }
  },
  // Run nearest task
  {
    "context": "EmptyPane || SharedScreen || vim_mode == normal",
    "bindings": {
      "space r t": ["editor::SpawnNearestTask", { "reveal": "no_focus" }]
    }
  },
  // Sneak motion, refer https://github.com/zed-industries/zed/pull/22793/files#diff-90c0cb07588e2f309c31f0bb17096728b8f4e0bad71f3152d4d81ca867321c68
  {
    "context": "vim_mode == normal || vim_mode == visual",
    "bindings": {
      "s": ["vim::PushSneak", {}],
      "S": ["vim::PushSneakBackward", {}]
    }
  },
  // move up down for common menu
  {
    "context": "!ProjectPanel && vim_mode != normal && vim_mode != visual && vim_mode != insert",
    "bindings": {
      "ctrl-j": ["workspace::SendKeystrokes", "down"],
      "ctrl-k": ["workspace::SendKeystrokes", "up"],
      "ctrl-h": ["workspace::SendKeystrokes", "left"],
      "ctrl-l": ["workspace::SendKeystrokes", "right"]
    }
  },
  // move up down for completion
  {
    "context": "Editor && (showing_code_actions || showing_completions)",
    "bindings": {
      "ctrl-j": "editor::ContextMenuNext",
      "ctrl-k": "editor::ContextMenuPrevious"
    }
  },
  // hapoon
  {
    "context": "Editor && VimControl && !VimWaiting && !menu",
    "bindings": {
      "space h": ["task::Spawn", { "task_name": "edit crp" }],
      "space \\": ["task::Spawn", { "task_name": "clear crp" }],
      "space H": ["task::Spawn", { "task_name": "save crp" }],
      "space 1": ["task::Spawn", { "task_name": "open crp 1" }],
      "space 2": ["task::Spawn", { "task_name": "open crp 2" }],
      "space 3": ["task::Spawn", { "task_name": "open crp 3" }]
    }
  }
  // // Subword motion is not working really nice with `ciw`, disable for now
  // {
  //   "context": "VimControl && !menu",
  //   "bindings": {
  //     "w": "vim::NextSubwordStart",
  //     "b": "vim::PreviousSubwordStart",
  //     "e": "vim::NextSubwordEnd",
  //     "g e": "vim::PreviousSubwordEnd"
  //   }
  // }
]
